race
poids <- c(rnorm(FA,300,20),rnorm(FB,320,20),,rnorm(FC,300,20),rnorm(MA,520,30),rnorm(MB,480,20),rnorm(MC,500,20) )
# Simulons des valeurs
facteur <- 1
FA <- 6*facteur
FB <- 3*facteur
FC <- 8*facteur
MA <- 3*facteur
MB <- 3*facteur
MC <- 0*facteur
sexe <- c( rep("F",sum(FA,FB,FC)), rep("M",sum(MA,MB,MC)) )
sexe
race <- c(  rep("A",FA),rep("B",FB),rep("C",FC),rep("A",MA),rep("B",MB),rep("C",MC) )
race
poids <- c(rnorm(FA,300,20),rnorm(FB,320,20),rnorm(FC,300,20),rnorm(MA,520,30),rnorm(MB,480,20),rnorm(MC,500,20) )
# Simulons des valeurs
facteur <- 1
FA <- 6*facteur
FB <- 3*facteur
FC <- 8*facteur
MA <- 3*facteur
MB <- 3*facteur
MC <- 0*facteur
sexe <- c( rep("F",sum(FA,FB,FC)), rep("M",sum(MA,MB,MC)) )
sexe
race <- c(  rep("A",FA),rep("B",FB),rep("C",FC),rep("A",MA),rep("B",MB),rep("C",MC) )
race
poids <- c(rnorm(FA,300,20),rnorm(FB,320,20),rnorm(FC,300,20),rnorm(MA,520,30),rnorm(MB,480,20),rnorm(MC,500,20) )
poids
# Simulons des valeurs
facteur <- 1
FA <- 6*facteur
FB <- 3*facteur
FC <- 8*facteur
MA <- 3*facteur
MB <- 3*facteur
MC <- 0*facteur
sexe <- c( rep("F",sum(FA,FB,FC)), rep("M",sum(MA,MB,MC)) )
sexe
race <- c(  rep("A",FA),rep("B",FB),rep("C",FC),rep("A",MA),rep("B",MB),rep("C",MC) )
race
poids <- round(c(rnorm(FA,300,20),rnorm(FB,320,20),rnorm(FC,300,20),rnorm(MA,520,30),rnorm(MB,480,20),rnorm(MC,500,20) ),0)
poids
library(KefiR)
m.test(poids,sexe)
library(KefiR)
m.test(poids,sexe)
# anova à 1 facteur
aov(poids~sexe)
library(KefiR)
m.test(poids,sexe)
# anova à 1 facteur
summary(aov(poids~sexe))
#library(KefiR)
#m.test(poids,sexe)
# anova à 1 facteur
summary(aov(poids~sexe))
#library(KefiR)
#m.test(poids,sexe)
# anova à 1 facteur
summary(aov(poids~sexe))
# anova à 1 facteur
summary(aov(poids~race))
anova(lm(poids~as.factor(race)+as.factor(sexe)))
anova(lm(poids~as.factor(race)*as.factor(sexe)))
anova(lm(poids~as.factor(race)*as.factor(sexe)))
# Simulons des valeurs
facteur <- 10
FA <- 6*facteur
FB <- 3*facteur
FC <- 8*facteur
MA <- 3*facteur
MB <- 3*facteur
MC <- 0*facteur
sexe <- c( rep("F",sum(FA,FB,FC)), rep("M",sum(MA,MB,MC)) )
sexe
race <- c(  rep("A",FA),rep("B",FB),rep("C",FC),rep("A",MA),rep("B",MB),rep("C",MC) )
race
poids <- round(c(rnorm(FA,300,20),rnorm(FB,320,20),rnorm(FC,300,20),rnorm(MA,520,30),rnorm(MB,480,20),rnorm(MC,500,20) ),0)
poids
anova(lm(poids~as.factor(race)*as.factor(sexe)))
summary(lm(poids~as.factor(race)*as.factor(sexe)))
# Simulons des valeurs
facteur <- 2
FA <- 6*facteur
FB <- 3*facteur
FC <- 8*facteur
MA <- 3*facteur
MB <- 3*facteur
MC <- 0*facteur
sexe <- c( rep("F",sum(FA,FB,FC)), rep("M",sum(MA,MB,MC)) )
sexe
race <- c(  rep("A",FA),rep("B",FB),rep("C",FC),rep("A",MA),rep("B",MB),rep("C",MC) )
race
poids <- round(c(rnorm(FA,300,20),rnorm(FB,320,20),rnorm(FC,300,20),rnorm(MA,520,30),rnorm(MB,480,20),rnorm(MC,500,20) ),0)
poids
# ANOVA à 1 facteur
aov(poids~as.factor(race))
# ANOVA à 1 facteur
summary(aov(poids~as.factor(race)))
# ANOVA à 1 facteur
summary(aov(poids~as.factor(race)))
#On retrouvela même chose avec m.test()
library(KefiR)
m.test(poids,race)
# ANOVA à 1 facteur
summary(aov(poids~as.factor(race)))
#On retrouvela même chose avec m.test()
#library(KefiR)
#m.test(poids,race)
anova(lm(poids~as.factor(race)*as.factor(sexe)))
library(openxlsx)
dt<- read.xlsx(file.Choose())
dt<- read.xlsx(file.Choose())
dt<- read.xlsx(file.Choose())
dt<- read.xlsx(file.choose())
head(dt)
dt[,1]
dt[,2]
dt[,3]
hist(dt[,3])
hist(dt[,3])
densite <- density(dt[,3])
lines(densite,col="red")
densite <- density(dt[,3],freq=F)
densite <- density(dt[,3],freq=T)
hist(dt[,3],freq=F)
lines(densite,col="red")
lines(densite,col="red",lwd=3)
hist(dt[,3],freq=F)
densite <- density(dt[,3])
lines(densite,col="red",lwd=3)
x11()
lines(densite,col="red",lwd=3)
plot(densite)
install.packages("Rcpp")
install.packages("Rcpp")
library(knitr)
knitr::purl("Initiation06.Rmd")
getwd()
setwd("C:/Users/masse/Desktop/")
knitr::purl("Initiation06.Rmd")
colnames(iris)[1]
# Je vais calculer la longueur moyenne des sépales de chaque espèce d'iris
mesmoy <- by(iris[,1],iris$Species,mean) ; mesmoy
# by() peut accepter plusieurs facteurs
barplot(mesmoy,col="pink",space=2)
x <- c(1,2,5,NA,8,4,NA,3,2,NA) ; x
na.omit(x)
na.omit(x)
mean(x,na.rm=T)
is.na(x)
is.na(x)
any(is.na(x))
length(is.na(x))
which(is.na(x))
length(which(is.na(x))) # Nombre de données manquantes
which(is.na(x)) # Identifier l'indice (la position des données manquantes)
length(which(!is.na(x))) # Nombre de données manquantes
# Comptons les lignes de iris
nrow(iris)
indices_alea <- 1:150 ; indices_alea
indices_alea <- sample(1:150,10) ; indices_alea
# Visualisons cela
install.packages("VIM")
# Visualisons cela
#install.packages("VIM")
library(VIM)
matrixplot(iris)
data(iris)
# Comptons les lignes de iris
nrow(iris) # Il y en a 150
indices_alea <- sample(1:150,10) ; indices_alea # On tire au sort 10 numéros de lignes
iris[indices_alea,1] <- NA # Toutes les lignes de indices_alea de la colonne 1 sont remplacées par des NA
indices_alea <- sample(1:150,10) ; indices_alea # On tire au sort 10 numéros de lignes
iris[indices_alea,2] <- NA # Toutes les lignes de indices_alea de la colonne 2 sont remplacées par des NA
indices_alea <- sample(1:150,10) ; indices_alea # On tire au sort 10 numéros de lignes
iris[indices_alea,3] <- NA # Toutes les lignes de indices_alea de la colonne 3 sont remplacées par des NA
indices_alea <- sample(1:150,10) ; indices_alea # On tire au sort 10 numéros de lignes
iris[indices_alea,4] <- NA # Toutes les lignes de indices_alea de la colonne 4 sont remplacées par des NA
# Visualisons cela
#install.packages("VIM")
library(VIM)
matrixplot(iris)
# Testons ce qui se passe avec na.omit()
matrixplot(na.omit(iris))
# Mieux vaut appliquer NA.omit uniquement aux colonnes qui nous intéressent.
# exemple : na.omit sur les colonnes 1 et 2
matrixplot(na.omit(iris[,1:2]))
# Je veux garder mon tableau en éliminant seulement les lignes où j'ai des NA sur la variable 2.
indices_lignes_a_eliminer <- which(is.na(iris[,2]))
indices_lignes_a_eliminer
matrixplot(iris[-indices_lignes_a_eliminer ,])
# Je veux garder mon tableau en éliminant seulement les lignes où j'ai des NA sur la variable 2.
indices_lignes_a_eliminer <- which(is.na(iris[,2]))
indices_lignes_a_eliminer
matrixplot(iris[-indices_lignes_a_eliminer ,])
# Je veux garder toutes les lignes du tableau sauf si j'ai une donnée manquante en 2 et/ou en 3.
ind2 <- which(is.na(iris[,2]))
ind3 <- which(is.na(iris[,3]))
indices_lignes_a_eliminer  <- union(ind2,ind3)
matrixplot(iris[-indices_lignes_a_eliminer ,])
cor(iris[,1:4])
?cor
?cor
data(iris)
cor(iris[,1:4]) # on peut ignorer les manquantes, cf. aide - ce n'est pas na.rm
cor.test(iris[,1],iris[,2])
cor.test(iris[,1],iris[,2])$p.value
# install.packages("remotes")
library(remotes)
corrigraph(iris)
# remotes::install_github("Antoine-Masse/KefiR")
library(KefiR)
corrigraph(iris)
shapiro.test(iris[,1])$p.value
hist(iris[,1])
shapiro.test(iris[,1])$p.value
shapiroo.test(c(rnorm(10,10,1),rnorm(10,100,1))
shapiro.test(c(rnorm(10,10,1),rnorm(10,100,1))
shapiro.test(c(rnorm(10,10,1),rnorm(10,100,1)))
by(iris[,1],iris$Species,shapiro.test)
# si p-value < 0.05, alors on va parler de différence significative (très peu de chances que ces échantillons viennent d'une même population)
t.test(iris[iris$Species=="versicolor",1],iris[iris$Species=="virginica",1])$p.value
m.test(iris[,1],iris$Species)
# anova à 1 facteur
aov(iris[,1]~factor(iris[,5])) -> myaov
summary(myaov) # summary() fait un bilan de l'analyse
# anova à 2 facteurs (ou plus)
# Créeons un nouveau facteur pour l'exemple
# utilisont cut() pour découper iris[,2]
mon_facteur2 <- cut(iris[,2],c(-Inf,2.5,3.5,Inf))
mon_facteur2
# anova à 2 facteurs
aov(iris[,1]~factor(iris[,5])*mon_facteur2) -> myaov
summary(aov)
summary(myaov)
summary(myaov)
summary(myaov)
corrigraph(iris,mu=T)
Categorie1 <- iris$Species
Categorie2 <- cut(iris[,2],c(-Inf,2.5,3.5,Inf))
table(Categorie1,Categorie2)
Categorie1 <- iris$Species
Categorie2 <- cut(iris[,2],c(-Inf,3.5,Inf))
table(Categorie1,Categorie2)
Categorie1 <- iris$Species
Categorie2 <- cut(iris[,2],c(-Inf,3.5,Inf))
levels(Categorie2) <- c("petit","grand")
table(Categorie1,Categorie2)
Categorie1 <- iris$Species
Categorie2 <- cut(iris[,2],c(-Inf,3.5,Inf))
levels(Categorie2) <- c("petit","grand")
table(Categorie1,Categorie2)->contingent
barplot(contingent)
contigent
contingent
barplot(t(contingent))
barplot(contingent,beside=T) # Barres accolées
barplot(contingent,beside=T,legend=T) # Barres accolées
barplot(contingent,beside=T,legend=T,c(1,2,3)) # Barres accolées
barplot(contingent,beside=T,legend=T,col=c(1,2,3)) # Barres accolées
# Et si on raisonne avec des %
barplot(prop.table(contingent),beside=T,legend=T,col=c(1,2,3))
prop.table(contingent)
prop.table(contingent,2) # Par colonne
prop.table(contingent,1) # Par ligne
barplot(prop.table(contingent,1),beside=T,legend=T,col=c(1,2,3))
barplot(prop.table(contingent,2),beside=T,legend=T,col=c(1,2,3))
chisq.test(contingent)
chisq.test(contingent)$p.value
iris2 <- cbind(iris,Categorie2)
corrigraph(iris2,prop=T)
iris2
corrigraph(iris2,prop=T)
corrigraph(iris2,prop=T,alpha=0.1)
corrigraph(iris2,prop=T,alpha=0.1)
corrigraph(iris2,mu=T,prop=T,alpha=0.1)
categorie2 <- Categorie2
iris2 <- cbind(iris,categorie2)
iris2
corrigraph(iris2,mu=T,prop=T,alpha=0.1)
corrigraph(iris2,prop=T,alpha=0.1)
x <- 1:10 ; x <- sample(x) ; x
sort(x)
sort(x,rev=T)
sort(x,rev=T)
?soprt
?sort
sort(x,decreasing=T)
order(x) # Les indices de x pour trier x
x <- 15:20 ; x <- sample(x) ; x
sort(x) # Ordre croissant
sort(x,decreasing=T) # Ordre décroissant
order(x) # Les indices de x pour trier x
x[order(x)] # revient à faire la même chose que sort()
x <- 15:20 ; x <- sample(x) ; x
sort(x) # Ordre croissant
sort(x,decreasing=T) # Ordre décroissant
order(x) # Les indices de x pour trier x
x[order(x)] # revient à faire la même chose que sort()
# exercice : trier le tableau iris en fonction de la colonne 1
iris[order(iris[,1]),]
# Premier programme
for (i in 1:5) {
print(i)
}
# Deuxième programme
data(iris)
for (i in 1:4) {
print(i)
hist(iris[,i])
}
# Deuxième programme
data(iris)
for (i in 1:4) {
print(colnames[i])
hist(iris[,i])
}
# Deuxième programme
data(iris)
for (i in 1:4) {
print(colnames(iris)[i])
hist(iris[,i])
}
getwd()
getwd() # Pour savoir où seront sauvegardés les images
# Troisième programme
data(iris)
for (i in 1:4) {
print(colnames(iris)[i])
png(paste0("image",i,".png"),width=1000,height = 1000)
hist(iris[,i])
dev.off()
}
# Quatrième programme
data(iris)
for (i in 1:4) {
pval <- t.test(iris[iris$Species=="virginica",i],iris[iris$Species=="versicolor",i])$p.value
if (pval < 0.05) {
cat("Il y a une différence significative entre versicolor et virginica pour la variable",i,"\n")
}
}
# Quatrième programme
data(iris)
for (i in 1:4) {
pval <- t.test(iris[iris$Species=="virginica",i],iris[iris$Species=="versicolor",i])$p.value
if (pval < 0.01) {
cat("Il y a une différence significative entre versicolor et virginica pour la variable",i,"\n")
}
}
# Quatrième programme
data(iris)
for (i in 1:4) {
pval <- t.test(iris[iris$Species=="virginica",i],iris[iris$Species=="versicolor",i])$p.value
if (pval < 0.001) {
cat("Il y a une différence significative entre versicolor et virginica pour la variable",i,"\n")
}
}
# Quatrième programme
data(iris)
for (i in 1:4) {
pval <- t.test(iris[iris$Species=="virginica",i],iris[iris$Species=="versicolor",i])$p.value
if (pval < 0.001) {
cat("Il y a une différence significative entre versicolor et virginica pour la variable",i,"\n")
} else {
cat("Oublions la variable",i,"\n")
}
}
# Ma fonction IMC
imc <- function(poids,taille) {
if (taille > 3) {
cat("On t'a dit en m !\n")
} else {
myimc <- poids/taille^2
if (myimc > 25) {
cat("Attention, surpoids.\n")
} if else (myimc < 17) {
# Ma fonction IMC
imc <- function(poids,taille) {
if (taille > 3) {
cat("On t'a dit en m !\n")
} else {
myimc <- poids/taille^2
if (myimc > 25) {
cat("Attention, surpoids.\n")
} ifelse (myimc < 17) {
# Ma fonction IMC
imc <- function(poids,taille) {
if (taille > 3) {
cat("On t'a dit en m !\n")
} else {
myimc <- poids/taille^2
if (myimc > 25) {
cat("Attention, surpoids.\n")
} if else(myimc < 17) {
# Ma fonction IMC
imc <- function(poids,taille) {
if (taille > 3) {
cat("On t'a dit en m !\n")
} else {
myimc <- poids/taille^2
if (myimc > 25) {
cat("Attention, surpoids.\n")
} else if (myimc < 17) {
cat("C'est maigre.\n")
} else {
cat("C'est moyen !\n")
}
}
}
imc(80,175)
# Ma fonction IMC
imc <- function(poids,taille) {
if (taille > 3) {
cat("On t'a dit en m !\n")
} else {
myimc <- poids/taille^2
if (myimc > 25) {
cat("Attention, surpoids.\n")
} else if (myimc < 17) {
cat("C'est maigre.\n")
} else {
cat("C'est moyen !\n")
}
}
}
imc(80,175)
imc(80,1.75)
# Ma fonction IMC
imc <- function(poids,taille) {
if (taille > 3) {
cat("On t'a dit en m !\n")
} else {
myimc <- poids/taille^2
if (myimc > 25) {
cat("Attention, surpoids.\n")
} else if (myimc < 17) {
cat("C'est maigre.\n")
} else {
cat("C'est moyen !\n")
}
}
return(imc)
}
imc(80,175)
imc(80,1.75)->a ; a
# Ma fonction IMC
imc <- function(poids,taille) {
if (taille > 3) {
cat("On t'a dit en m !\n")
} else {
myimc <- poids/taille^2
if (myimc > 25) {
cat("Attention, surpoids.\n")
} else if (myimc < 17) {
cat("C'est maigre.\n")
} else {
cat("C'est moyen !\n")
}
}
return(imc)
}
imc(80,175)
imc(80,1.75)->a ; a
imc(80,1.75)->a ; a
# Ma fonction IMC
imc <- function(poids,taille) {
if (taille > 3) {
cat("On t'a dit en m !\n")
} else {
myimc <- poids/taille^2
if (myimc > 25) {
cat("Attention, surpoids.\n")
} else if (myimc < 17) {
cat("C'est maigre.\n")
} else {
cat("C'est moyen !\n")
}
return(imc)
}
}
imc(80,175)
imc(80,1.75)->a ; a
a
# Ma fonction IMC
imc <- function(poids,taille) {
if (taille > 3) {
cat("On t'a dit en m !\n")
} else {
myimc <- poids/taille^2
if (myimc > 25) {
cat("Attention, surpoids.\n")
} else if (myimc < 17) {
cat("C'est maigre.\n")
} else {
cat("C'est moyen !\n")
}
return(myimc)
}
}
imc(80,175)
imc(80,1.75)->a ; a
data(iris)
myacp <- prcomp(iris[,1:4],center=T,scale=T)
library(KefiR)
pareto(myacp$sdev)
plot(myacp$x[,1:2])
plot(myacp$x[,1:2],col=iris$Species, pch=2)
plot(myacp$x[,1:2],col=iris$Species, pch=16)
biplot(myacp)
plot(myacp$x[,1:2],col=iris$Species, pch=16)
