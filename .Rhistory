E(net)$arrow.size <- 0 # Exemple de sauvegarde d'un paramètre qu'on aurait plus ainsi à mettre dans comme paramètre de plot comme c'est le cas ci-dessous...
E(net)$edge.color <- "black"
# Afficher le tout en tenant compte avec betweenness du poids relatifs d'un mot pour lui donner une taille
clp <- cluster_optimal(net)
class(clp)
l <- layout_with_fr(net)
plot(clp, net, layout = l, vertex.size=(betweenness(net))+10)
net <- graph_from_adjacency_matrix(matx, weighted=T)
net <- simplify(net, remove.multiple = T, remove.loops = TRUE) # élaguer les liens redondants
E(net)$arrow.size <- 0 # Exemple de sauvegarde d'un paramètre qu'on aurait plus ainsi à mettre dans comme paramètre de plot comme c'est le cas ci-dessous...
E(net)$edge.color <- "black"
# Afficher le tout en tenant compte avec betweenness du poids relatifs d'un mot pour lui donner une taille
plot(net ,vertex.size=sqrt(betweenness(net))+10,vertex.color="green",
edge.arrow.size =0,arrow.mode=0,edge.color="black")
#clp <- cluster_fast_greedy(net)
#clp <- cluster_label_prop(net)
clp <- cluster_optimal(net)
class(clp)
l <- layout_with_fr(net)
summary(E(net)$weight)
net <- delete.edges(net, E(net)[ abs(E(net)$weight) < 200])
plot(clp, net, layout = l, vertex.size=sqrt(betweenness(net))+10)
#clp <- cluster_fast_greedy(net)
#clp <- cluster_label_prop(net)
clp <- cluster_optimal(net)
class(clp)
l <- layout_with_fr(net)
summary(E(net)$weight)
net <- delete.edges(net, E(net)[ abs(E(net)$weight) < 1])
plot(clp, net, layout = l, vertex.size=sqrt(betweenness(net))+10)
summary(E(net)$weight)
summary(E(net)$weight)
net <- graph_from_adjacency_matrix(matx, weighted=T)
net <- simplify(net, remove.multiple = T, remove.loops = TRUE) # élaguer les liens redondants
E(net)$arrow.size <- 0 # Exemple de sauvegarde d'un paramètre qu'on aurait plus ainsi à mettre dans comme paramètre de plot comme c'est le cas ci-dessous...
E(net)$edge.color <- "black"
summary(E(net)$weight)
net <- delete.edges(net, E(net)[ abs(E(net)$weight) < 0.5])
# Afficher le tout en tenant compte avec betweenness du poids relatifs d'un mot pour lui donner une taille
clp <- cluster_optimal(net)
class(clp)
l <- layout_with_fr(net)
plot(clp, net, layout = l, vertex.size=(betweenness(net))+10)
summary(E(net)$weight)
net <- graph_from_adjacency_matrix(matx, weighted=T)
net <- simplify(net, remove.multiple = T, remove.loops = TRUE) # élaguer les liens redondants
E(net)$arrow.size <- 0 # Exemple de sauvegarde d'un paramètre qu'on aurait plus ainsi à mettre dans comme paramètre de plot comme c'est le cas ci-dessous...
E(net)$edge.color <- "black"
summary(E(net)$weight)
net <- delete.edges(net, E(net)[ abs(E(net)$weight) < 1])
# Afficher le tout en tenant compte avec betweenness du poids relatifs d'un mot pour lui donner une taille
clp <- cluster_optimal(net)
class(clp)
l <- layout_with_fr(net)
plot(clp, net, layout = l, vertex.size=(betweenness(net))+10)
net <- graph_from_adjacency_matrix(matx, weighted=T)
net <- simplify(net, remove.multiple = T, remove.loops = TRUE) # élaguer les liens redondants
E(net)$arrow.size <- 0 # Exemple de sauvegarde d'un paramètre qu'on aurait plus ainsi à mettre dans comme paramètre de plot comme c'est le cas ci-dessous...
E(net)$edge.color <- "black"
summary(E(net)$weight)
net <- delete.edges(net, E(net)[ abs(E(net)$weight) < 0.4])
# Afficher le tout en tenant compte avec betweenness du poids relatifs d'un mot pour lui donner une taille
clp <- cluster_optimal(net)
class(clp)
l <- layout_with_fr(net)
plot(clp, net, layout = l, vertex.size=(betweenness(net))+10)
getwd()
png("cluster.png",width=1024,height=800)
plot(clp, net, layout = l, vertex.size=(betweenness(net))+10)
dev.off()
png("cluster.png",width=1024,height=800)
plot(clp, net, layout = l, vertex.size=(betweenness(net))+10)
dev.off()
taille = 30
tsf <- textstat_frequency(my_dfm,n=taille)
mywd <- tsf$feature
'%notin%' <- Negate('%in%')
listeof <- c("ministere","education","superieur","httpeduscoleducationfrressourcesmaternelle","retrouvez","table","nationale","ecole","maternelle","general")
mywd <- mywd[mywd %notin% listeof]
mywd
dico_perso <- data.frame(mywd,mywd)
liste <- list()
# Construction de la liste avec les termes du
for(i in 1:nrow(dico_perso)){
# data.fr[i,1] = item; #str_split décompose la seconde col.
#model <- str_replace_all(dico_perso[i,2]," ","")
model <- dico_perso[i,2]
liste[dico_perso[i,1]] <- str_split(model, pattern=',')
}
liste
dic <- dictionary(liste)
tn <- tokens_lookup(toks_news, dic, exclusive=T, levels=1:2, nomatch = "_UNMATCHED")
mymat <- fcm(tn, context = "window", count = "weighted", window = 12,
, ordered = TRUE, tri = FALSE)
positionr <- na.omit(match(mywd,rownames(mymat)))
positionc <- na.omit(match(mywd,colnames(mymat)))
matx <- mymat[positionr, positionc]
nrow(matx) ; matx
net <- graph_from_adjacency_matrix(matx, weighted=T)
net <- simplify(net, remove.multiple = T, remove.loops = TRUE) # élaguer les liens redondants
E(net)$arrow.size <- 0 # Exemple de sauvegarde d'un paramètre qu'on aurait plus ainsi à mettre dans comme paramètre de plot comme c'est le cas ci-dessous...
E(net)$edge.color <- "black"
summary(E(net)$weight)
net <- delete.edges(net, E(net)[ abs(E(net)$weight) < 0.4])
# Afficher le tout en tenant compte avec betweenness du poids relatifs d'un mot pour lui donner une taille
clp <- cluster_optimal(net)
class(clp)
l <- layout_with_fr(net)
getwd()
png("cluster2.png",width=1024,height=800)
plot(clp, net, layout = l, vertex.size=(betweenness(net))+10)
dev.off()
net <- graph_from_adjacency_matrix(matx, weighted=T)
net <- simplify(net, remove.multiple = T, remove.loops = TRUE) # élaguer les liens redondants
E(net)$arrow.size <- 0 # Exemple de sauvegarde d'un paramètre qu'on aurait plus ainsi à mettre dans comme paramètre de plot comme c'est le cas ci-dessous...
E(net)$edge.color <- "black"
summary(E(net)$weight)
net <- delete.edges(net, E(net)[ abs(E(net)$weight) < 0.6])
# Afficher le tout en tenant compte avec betweenness du poids relatifs d'un mot pour lui donner une taille
clp <- cluster_optimal(net)
class(clp)
l <- layout_with_fr(net)
plot(clp, net, layout = l, vertex.size=(betweenness(net))+10)
net <- delete.edges(net, E(net)[ abs(E(net)$weight) < 0.8])
clp <- cluster_optimal(net)
class(clp)
l <- layout_with_fr(net)
plot(clp, net, layout = l, vertex.size=(betweenness(net))+10)
summary(E(net)$weight)
net <- delete.edges(net, E(net)[ abs(E(net)$weight) < 2])
clp <- cluster_optimal(net)
class(clp)
l <- layout_with_fr(net)
plot(clp, net, layout = l, vertex.size=(betweenness(net))+10)
getwd()
png("cluster3.png",width=1024,height=800)
plot(clp, net, layout = l, vertex.size=(betweenness(net))+10)
dev.off()
taille = 30
tsf <- textstat_frequency(my_dfm,n=taille)
mywd <- tsf$feature
'%notin%' <- Negate('%in%')
listeof <- c("ministere","education","superieur","httpeduscoleducationfrressourcesmaternelle","retrouvez","table","nationale","ecole","maternelle","general")
mywd <- mywd[mywd %notin% listeof]
mywd
dico_perso <- data.frame(mywd,mywd)
liste <- list()
# Construction de la liste avec les termes du
for(i in 1:nrow(dico_perso)){
# data.fr[i,1] = item; #str_split décompose la seconde col.
#model <- str_replace_all(dico_perso[i,2]," ","")
model <- dico_perso[i,2]
liste[dico_perso[i,1]] <- str_split(model, pattern=',')
}
liste
dic <- dictionary(liste)
tn <- tokens_lookup(toks_news, dic, exclusive=T, levels=1:2, nomatch = "_UNMATCHED")
mymat <- fcm(tn, context = "window", count = "weighted", window = 9,
, ordered = TRUE, tri = FALSE)
positionr <- na.omit(match(mywd,rownames(mymat)))
positionc <- na.omit(match(mywd,colnames(mymat)))
matx <- mymat[positionr, positionc]
nrow(matx) ; matx
net <- graph_from_adjacency_matrix(matx, weighted=T)
net <- simplify(net, remove.multiple = T, remove.loops = TRUE) # élaguer les liens redondants
E(net)$arrow.size <- 0 # Exemple de sauvegarde d'un paramètre qu'on aurait plus ainsi à mettre dans comme paramètre de plot comme c'est le cas ci-dessous...
E(net)$edge.color <- "black"
summary(E(net)$weight)
net <- delete.edges(net, E(net)[ abs(E(net)$weight) < 0.5])
# Afficher le tout en tenant compte avec betweenness du poids relatifs d'un mot pour lui donner une taille
clp <- cluster_optimal(net)
class(clp)
l <- layout_with_fr(net)
getwd()
png("cluster3.png",width=1024,height=800)
plot(clp, net, layout = l, vertex.size=(betweenness(net))+10)
dev.off()
taille = 30
tsf <- textstat_frequency(my_dfm,n=taille)
mywd <- tsf$feature
'%notin%' <- Negate('%in%')
listeof <- c("ministere","education","superieur","httpeduscoleducationfrressourcesmaternelle","retrouvez","table","nationale","ecole","maternelle","general")
mywd <- mywd[mywd %notin% listeof]
mywd <- c(mywd,"developpement_de_l'enfant","place_de_l'enseignant")
dico_perso <- data.frame(mywd,mywd)
liste <- list()
# Construction de la liste avec les termes du
for(i in 1:nrow(dico_perso)){
# data.fr[i,1] = item; #str_split décompose la seconde col.
#model <- str_replace_all(dico_perso[i,2]," ","")
model <- dico_perso[i,2]
liste[dico_perso[i,1]] <- str_split(model, pattern=',')
}
liste
dic <- dictionary(liste)
tn <- tokens_lookup(toks_news, dic, exclusive=T, levels=1:2, nomatch = "_UNMATCHED")
mymat <- fcm(tn, context = "window", count = "weighted", window = 9,
, ordered = TRUE, tri = FALSE)
positionr <- na.omit(match(mywd,rownames(mymat)))
positionc <- na.omit(match(mywd,colnames(mymat)))
matx <- mymat[positionr, positionc]
nrow(matx) ; matx
net <- graph_from_adjacency_matrix(matx, weighted=T)
net <- simplify(net, remove.multiple = T, remove.loops = TRUE) # élaguer les liens redondants
E(net)$arrow.size <- 0 # Exemple de sauvegarde d'un paramètre qu'on aurait plus ainsi à mettre dans comme paramètre de plot comme c'est le cas ci-dessous...
E(net)$edge.color <- "black"
# Afficher le tout en tenant compte avec betweenness du poids relatifs d'un mot pour lui donner une taille
plot(net ,vertex.size=sqrt(betweenness(net))+10,vertex.color="green",
edge.arrow.size =0,arrow.mode=0,edge.color="black")
net <- graph_from_adjacency_matrix(matx, weighted=T)
net <- simplify(net, remove.multiple = T, remove.loops = TRUE) # élaguer les liens redondants
E(net)$arrow.size <- 0 # Exemple de sauvegarde d'un paramètre qu'on aurait plus ainsi à mettre dans comme paramètre de plot comme c'est le cas ci-dessous...
E(net)$edge.color <- "black"
summary(E(net)$weight)
net <- delete.edges(net, E(net)[ abs(E(net)$weight) < 0.5])
# Afficher le tout en tenant compte avec betweenness du poids relatifs d'un mot pour lui donner une taille
clp <- cluster_optimal(net)
class(clp)
l <- layout_with_fr(net)
getwd()
png("cluster4.png",width=1024,height=800)
plot(clp, net, layout = l, vertex.size=(betweenness(net))+10)
dev.off()
taille = 30
tsf <- textstat_frequency(my_dfm,n=taille)
mywd <- tsf$feature
'%notin%' <- Negate('%in%')
listeof <- c("ministere","education","superieur","httpeduscoleducationfrressourcesmaternelle","retrouvez","table","nationale","ecole","maternelle","general")
mywd <- mywd[mywd %notin% listeof]
mywd <- c(mywd,"place_de_l'enseignant")
dico_perso <- data.frame(mywd,mywd)
liste <- list()
# Construction de la liste avec les termes du
for(i in 1:nrow(dico_perso)){
# data.fr[i,1] = item; #str_split décompose la seconde col.
#model <- str_replace_all(dico_perso[i,2]," ","")
model <- dico_perso[i,2]
liste[dico_perso[i,1]] <- str_split(model, pattern=',')
}
liste
dic <- dictionary(liste)
tn <- tokens_lookup(toks_news, dic, exclusive=T, levels=1:2, nomatch = "_UNMATCHED")
mymat <- fcm(tn, context = "window", count = "weighted", window = 11,
, ordered = TRUE, tri = FALSE)
positionr <- na.omit(match(mywd,rownames(mymat)))
positionc <- na.omit(match(mywd,colnames(mymat)))
matx <- mymat[positionr, positionc]
nrow(matx) ; matx
library(igraph)
net <- graph_from_adjacency_matrix(matx, weighted=T)
net <- simplify(net, remove.multiple = T, remove.loops = TRUE) # élaguer les liens redondants
E(net)$arrow.size <- 0 # Exemple de sauvegarde d'un paramètre qu'on aurait plus ainsi à mettre dans comme paramètre de plot comme c'est le cas ci-dessous...
E(net)$edge.color <- "black"
# Afficher le tout en tenant compte avec betweenness du poids relatifs d'un mot pour lui donner une taille
clp <- cluster_optimal(net)
class(clp)
l <- layout_with_fr(net)
plot(clp, net, layout = l, vertex.size=(betweenness(net))+10)
library(igraph)
net <- graph_from_adjacency_matrix(matx, weighted=T)
net <- simplify(net, remove.multiple = T, remove.loops = TRUE) # élaguer les liens redondants
E(net)$arrow.size <- 0 # Exemple de sauvegarde d'un paramètre qu'on aurait plus ainsi à mettre dans comme paramètre de plot comme c'est le cas ci-dessous...
E(net)$edge.color <- "black"
# Afficher le tout en tenant compte avec betweenness du poids relatifs d'un mot pour lui donner une taille
clp <- cluster_optimal(net)
class(clp)
l <- layout_with_fr(net)
plot(clp, net, layout = l, vertex.size=(betweenness(net))+10)
net <- graph_from_adjacency_matrix(matx, weighted=T)
net <- simplify(net, remove.multiple = T, remove.loops = TRUE) # élaguer les liens redondants
E(net)$arrow.size <- 0 # Exemple de sauvegarde d'un paramètre qu'on aurait plus ainsi à mettre dans comme paramètre de plot comme c'est le cas ci-dessous...
E(net)$edge.color <- "black"
summary(E(net)$weight)
net <- delete.edges(net, E(net)[ abs(E(net)$weight) < 0.5])
# Afficher le tout en tenant compte avec betweenness du poids relatifs d'un mot pour lui donner une taille
clp <- cluster_optimal(net)
class(clp)
l <- layout_with_fr(net)
getwd()
png("cluster4.png",width=1024,height=800)
plot(clp, net, layout = l, vertex.size=(betweenness(net))*2+2)
dev.off()
net <- graph_from_adjacency_matrix(matx, weighted=T)
net <- simplify(net, remove.multiple = T, remove.loops = TRUE) # élaguer les liens redondants
E(net)$arrow.size <- 0 # Exemple de sauvegarde d'un paramètre qu'on aurait plus ainsi à mettre dans comme paramètre de plot comme c'est le cas ci-dessous...
E(net)$edge.color <- "black"
summary(E(net)$weight)
net <- delete.edges(net, E(net)[ abs(E(net)$weight) < 0.5])
# Afficher le tout en tenant compte avec betweenness du poids relatifs d'un mot pour lui donner une taille
clp <- cluster_optimal(net)
class(clp)
l <- layout_with_fr(net)
getwd()
png("cluster4.png",width=1024,height=800)
plot(clp, net, layout = l, vertex.size=(betweenness(net))*2+10)
dev.off()
E(net)$weight <- abs((E(net)$weight-max(E(net)$weight))/E(net)$weight)
summary(E(net)$weight)
E(net)$weight <- abs((E(net)$weight-max(E(net)$weight))/E(net)$weight)
summary(E(net)$weight)
net <- graph_from_adjacency_matrix(matx, weighted=T)
net <- simplify(net, remove.multiple = T, remove.loops = TRUE) # élaguer les liens redondants
E(net)$arrow.size <- 0 # Exemple de sauvegarde d'un paramètre qu'on aurait plus ainsi à mettre dans comme paramètre de plot comme c'est le cas ci-dessous...
E(net)$edge.color <- "black"
summary(E(net)$weight)
E(net)$weight <- abs((E(net)$weight-max(E(net)$weight))/max(E(net)$weight))
summary(E(net)$weight)
hist(E(net)$weight,breaks=20)
net <- delete.edges(net, E(net)[ abs(E(net)$weight) < 0.7])
# Afficher le tout en tenant compte avec betweenness du poids relatifs d'un mot pour lui donner une taille
clp <- cluster_optimal(net)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/masse/Google Drive (apc.masse@gmail.com)/IUT/statistiques/site/R_script/Textuel_sémantique/2021_Milena_Prestation")
library("readtext") # Ouverture de plusieurs documents  de tous les types
library(quanteda) # textmining
P1 <- readtext("Ress_c1_jouer_jouerapprendre_458303.pdf") # Attention, cete fonction combinée avec file.choose() peut débloquer en fonction du nom du fichier.
# grnancy2018ok.pdf
P1 <- readtext("grnancy2018ok.pdf") # Attention, cete fonction combinée avec file.choose() peut débloquer en fonction du nom du fichier.
#P1 <- readtext(file.choose()) # Attention, cete fonction combinée avec file.choose() peut débloquer en fonction du nom du fichier.
mon_corpus <- corpus(P1)
library(textclean)
corpus<- replace_symbol(mon_corpus)
corpus<- replace_non_ascii(corpus,replacement="")
corpus<- strip(corpus, char.keep = "~~", digit.remove = TRUE, apostrophe.remove = F)
mes_caracteres <- table(unlist(strsplit (corpus,"")))
print(mes_caracteres)
uniq_car <- names(mes_caracteres) # pour afficher tous les types de caractères
print(uniq_car)
library("stringr")
corpus <- str_replace_all(corpus,uniq_car[1], " ")
toks_news <- tokens(corpus,remove_punct=T,remove_numbers=F) %>%
tokens_remove(., pattern = stopwords('fr'), valuetype = 'fixed') %>% tokens_tolower(., keep_acronyms = FALSE)
# Charger un dictionnaire en ligne
swfr1 <- stopwords(language='fr', source='stopwords-iso' ) # permet d'avoir un dictionnaire plus complet que celui par défaut
# Compléter ce dictionnaire
swfr1 <- c(swfr1,"jai","nest","qua","quil","etions","ca","etait","ete","faire","etaient","fit","semblaient","voulait","lorsqu","aller","a","ans","chapitre","pageref") # on,peut ajouter ainsi, à ce dictionnaire, son propre dictionnaire
swfr2 <- list("jeu_libre" = c("jeu libre","jeux libres","libre","libres","jeu_libre"),"jeu_structure" = c("jeu structure","jeux structures","structure","structures","jeu dirige","jeux diriges","dirige","diriges","jeu_structure"),"developpement_de_l_enfant" = c("developpement de l enfant","developpements de l enfant","developpement","developpement_de_l_enfant","developper"),"place_de_l_enseignant" = c("place de l enseignant","place","place_de_l_enseignant"),"jeu" = c("jeu","jeux"),"enfant" = c("enfant","enfants"),"jouer" = c("joue","jouer"),"activite" = c("activite","activites","Activite","Activites"),"apprentissages" = c("apprentissage","apprentissages","Apprentissage","Apprentissages","Apprendre","apprendre")) ; swfr2 <- dictionary(swfr2)
toks_news <- tokens_remove(toks_news, swfr1)
toks_news <- tokens_lookup(toks_news, swfr2,exclusive=F)
#toks_news <- tokens_select(toks_news, pattern=swfr2, selection = "keep")
#toks_news <- tokens_remove(toks_news, swfr2)
my_dfm<- dfm(toks_news,remove=stopwords('fr'),remove_punct=F ,stem=F)
taille = 30
tsf <- textstat_frequency(my_dfm,n=taille)
mywd <- tsf$feature
'%notin%' <- Negate('%in%')
listeof <- c("ministere","education","superieur","httpeduscoleducationfrressourcesmaternelle","retrouvez","table","nationale","ecole","maternelle","general","paris","edition","donner","monde","editions","and","mettre")
mywd <- mywd[mywd %notin% listeof]
sort(mywd)
dico_perso <- data.frame(mywd,mywd)
liste <- list()
# Construction de la liste avec les termes du
for(i in 1:nrow(dico_perso)){
# data.fr[i,1] = item; #str_split décompose la seconde col.
#model <- str_replace_all(dico_perso[i,2]," ","")
model <- dico_perso[i,2]
liste[dico_perso[i,1]] <- str_split(model, pattern=',')
}
liste
dic <- dictionary(liste)
tn <- tokens_lookup(toks_news, dic, exclusive=T, levels=1:2, nomatch = "_UNMATCHED")
mymat <- fcm(tn, context = "window", count = "weighted", window = 11,
, ordered = TRUE, tri = FALSE)
positionr <- na.omit(match(mywd,rownames(mymat)))
positionc <- na.omit(match(mywd,colnames(mymat)))
matx <- mymat[positionr, positionc]
nrow(matx) ;
matx <- matx/max(matx)
matx <- sqrt(matx)
matx
library(igraph)
net <- graph_from_adjacency_matrix(matx, weighted=T)
net <- simplify(net, remove.multiple = T, remove.loops = TRUE) # élaguer les liens redondants
#net <- delete.edges(net, E(net)[ abs(E(net)$weight) < 0.7]) # Ne pas tenir compte des proximités insuffisantes
E(net)$arrow.size <- 0 # Exemple de sauvegarde d'un paramètre qu'on aurait plus ainsi à mettre dans comme paramètre de plot comme c'est le cas ci-dessous...
E(net)$edge.color <- "black"
summary(E(net)$weight)
#E(net)$weight <- (E(net)$weight)/max(E(net)$weight)
summary(E(net)$weight)
hist(E(net)$weight,breaks=20)
net <- delete.edges(net, E(net)[ abs(E(net)$weight) < 0.15])
# 0.7 pour Eduscol
# 0.9 pour ageem
# Afficher le tout en tenant compte avec betweenness du poids relatifs d'un mot pour lui donner une taille
clp <- cluster_optimal(net)
class(clp)
l <- layout_with_fr(net)
getwd()
png("cluster7.png",width=1024,height=800)
plot(clp, net, layout = l,vertex.size=sqrt(betweenness(net))*3+12,vertex.color="yellow",
arrow.mode=0,edge.width=((E(net)$weight)*round(3/(1-median(E(net)$weight)))^2), edge.color =E(net)$colour,edge.arrow.size=0)
#plot(clp, net, layout = l, vertex.size=(betweenness(net))*0.2+5)
dev.off()
l <- layout_with_fr(net,dim=3)
#getwd()
#png("cluster7.png",width=1024,height=800)
rglplot( net, layout = l,vertex.size=sqrt(betweenness(net))*3+12,vertex.color="yellow",
arrow.mode=0,edge.width=((E(net)$weight)*round(3/(1-median(E(net)$weight)))^2), edge.color =E(net)$colour,edge.arrow.size=0)
#plot(clp, net, layout = l, vertex.size=(betweenness(net))*0.2+5)
#dev.off()
print.htmlwidget tools:rstudio
library(rglwidget)
library(htmltools)
install.packages("rglwidget")
library(rglwidget)
library(htmltools)
l <- layout_with_fr(net,dim=3)
#getwd()
#png("cluster7.png",width=1024,height=800)
graph3D <- rglplot( net, layout = l,vertex.size=sqrt(betweenness(net))*3+12,vertex.color="yellow",
arrow.mode=0,edge.width=((E(net)$weight)*round(3/(1-median(E(net)$weight)))^2), edge.color =E(net)$colour,edge.arrow.size=0)
#plot(clp, net, layout = l, vertex.size=(betweenness(net))*0.2+5)
#dev.off()
browsable(tagList(
rglwidget(elementId = "example", width = 500, height = 400,
controllers = "player"),
playwidget("example",
ageControl(births = theta, ages = c(0, 0, 1),
objids = graph3D, alpha = c(0, 1, 0)),
start = 1, stop = 6*pi, step = 0.1,
rate = 6,elementId = "player")
))
#plot(clp, net, layout = l, vertex.size=(betweenness(net))*0.2+5)
#dev.off()
theta <- seq(0, 6*pi, len=100)
xyz <- cbind(sin(theta), cos(theta), theta)
browsable(tagList(
rglwidget(elementId = "example", width = 500, height = 400,
controllers = "player"),
playwidget("example",
ageControl(births = theta, ages = c(0, 0, 1),
objids = graph3D, alpha = c(0, 1, 0)),
start = 1, stop = 6*pi, step = 0.1,
rate = 6,elementId = "player")
))
library(lmtest)abind
library(lmtest)
library(igraph)
source('~/.active-rstudio-document', echo=TRUE)
install.pacakges("rJava")
install.packages("rJava")
install.packages("rJava")
library("rJava")
#############
# Test 01 qui marche souvent
##############
# https://cran.r-project.org/web/packages/venneuler/venneuler.pdf
set.seed(1)
metro  <- data.frame(
"Measures"=c(rnorm(10,49.8,5.07)+ rep(rnorm(3,0,1.3),10,each=3) + rnorm(90,0,0.01) ),
"Operator"=rep(c("A","B","C"),10,each=3),
"Equipement"=rep(1:10,3,each=3))
library(KefiR)
#library(KefiR)
rr(metro$Measures,metro$Operator,metro$Equipement,sigma=5.5)-> output
#install.packages("venneuler")
library("venneuler") ;
print(output)
abs(output$RR-output$reproductiblity-output$repeatability)
output$repeatability
output$Vp
abs(output$RR-output$reproductiblity-output$repeatability)
output$RR
output$reproductiblity
abs(output$RR-output$reproductibility-output$repeatability)
(output$Vt - abs(output$RR-output$reproductibility-output$repeatability))/
(output$Vp*output$repeatability+output$Vp*output$reproductiblity-output$repeatability*output$reproductiblity*output$Vp)
(output$Vt - abs(output$RR-output$reproductibility-output$repeatability))
(output$Vp*output$repeatability+output$Vp*output$reproductiblity-output$repeatability*output$reproductiblity*output$Vp)
output$Vp*output$repeatability
(output$Vt - abs(output$RR-output$reproductibility-output$repeatability))/
(output$Vp*output$repeatability+output$Vp*output$reproductibility-output$repeatability*output$reproductiblity*output$Vp)
(output$Vt - abs(output$RR-output$reproductibility-output$repeatability))/
(output$Vp*output$repeatability+output$Vp*output$reproductibility-output$repeatability*output$reproductibility*output$Vp)
(output$Vt - abs(output$RR-output$reproductibility-output$repeatability))/
(output$Vp/100*output$repeatability/100+output$Vp/100*output$reproductibility/100-output$repeatability/100*output$reproductibility/100*output$Vp/100)
(output$Vt - abs(output$RR-output$reproductibility-output$repeatability))/
(output$Vp/100*output$repeatability/100)/(output$Vp/100*output$repeatability/100+output$Vp/100*output$reproductibility/100-output$repeatability/100*output$reproductibility/100*output$Vp/100)
(output$Vt - abs(output$RR-output$reproductibility-output$repeatability))/
(output$Vp*output$repeatability)/(output$Vp*output$repeatability+output$Vp*output$reproductibility-output$repeatability*output$reproductibility*output$Vp)
(output$Vp*output$repeatability)
Cseul <- output$Vt-output$RR
Cseul
Cpas_seul <- output$Vt-Cseul
Cpas_seul
coeffA <- output$repeatability / (output$repeatability+output$reproductiblity+output$Vp)
coeffA
coeffA <- output$repeatability / (output$repeatability+output$reproductibility+output$Vp)
coeffA
coeffV <- output$reproductibility / (output$repeatability+output$reproductibility+output$Vp)
coeffB <- output$reproductibility / (output$repeatability+output$reproductibility+output$Vp)
coeffB
coeffC <- output$Vp / (output$repeatability+output$reproductibility+output$Vp)
coeffC
coeffA*coeffC
coeffA*coeffC*output$Vt
coeffA <- output$repeatability / (output$repeatability+output$reproductibility+output$Vp)
coeffB <- output$reproductibility / (output$repeatability+output$reproductibility+output$Vp)
coeffC <- output$Vp / (output$repeatability+output$reproductibility+output$Vp)
vd <- venneuler(c(A=output$repeatability,
B=output$reproductibility,
C=output$Vp,
"A&B"=abs(output$RR-output$reproductibility-output$repeatability),
"A&C"=coeffA*coeffC*output$Vt, "B&C"=coeffB*coeffC*output$Vt ,
"A&B&C"=coeffA*coeffB*coeffC*output$Vt))
Cseul <- output$Vt-output$RR
plot(vd)
plot(vd)
require(devtools)
devtools::install_github("Antoine-Masse/KefiR")
warning()
devtools::install_github("Antoine-Masse/KefiR")
