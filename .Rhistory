VariableX[Produit==produits[i]] <- rnorm(repre*nJuge,moyennes[i])
}
# Répétitions
repe <- 3
produits <- c("A","B","C","D")
nJuge <- 6
moyennes <- c(6.5,3.5,5,3.5)
Produit <- rep(produits,each=nJuge,time=repe)
Juge <- rep(1:6,length(produits)*repe)
VariableX <- rep(0,length(Produit))
for (i in 1:length(produits)){
VariableX[Produit==produits[i]] <- rnorm(repe*nJuge,moyennes[i])
}
for (i in 1:nJuge) {
temp <- rnorm(1,0,1)
VariableX[Juge==i] <- VariableX[Juge==i]+temp
}
ifelse(VariableX<0,0,VariableX)-> VariableX
ifelse(VariableX>10,10,VariableX)-> VariableX
VariableX <- round(VariableX,0)
data <- data.frame(Produit,Juge,VariableX)
data
boxplot(data$VariableX~data$Produit)
boxplot(data$VariableX~data$Juge)
# Répétitions
repe <- 3
produits <- c("A","B","C","D")
nJuge <- 6
moyennes <- c(6.5,3.5,5,3.5)
Produit <- rep(produits,each=nJuge,time=repe)
Juge <- rep(1:6,length(produits)*repe)
VariableX <- rep(0,length(Produit))
for (i in 1:length(produits)){
VariableX[Produit==produits[i]] <- rnorm(repe*nJuge,moyennes[i])
}
for (i in 1:nJuge) {
temp <- rnorm(1,0,1)
VariableX[Juge==i] <- VariableX[Juge==i]+temp
}
ifelse(VariableX<0,0,VariableX)-> VariableX
ifelse(VariableX>10,10,VariableX)-> VariableX
VariableX <- round(VariableX,0)
data <- data.frame(Produit,Juge,VariableX)
data
boxplot(data$VariableX~data$Produit)
boxplot(data$VariableX~data$Juge)
# Répétitions
repe <- 3
produits <- c("A","B","C","D","D")
nJuge <- 6
moyennes <- c(6.5,3.5,5,3.5)
Produit <- rep(produits,each=nJuge,time=repe)
Juge <- rep(1:6,length(produits)*repe)
VariableX <- rep(0,length(Produit))
for (i in 1:length(produits)){
VariableX[Produit==produits[i]] <- rnorm(repe*nJuge,moyennes[i])
}
for (i in 1:nJuge) {
temp <- rnorm(1,0,1)
VariableX[Juge==i] <- VariableX[Juge==i]+temp
}
ifelse(VariableX<0,0,VariableX)-> VariableX
ifelse(VariableX>10,10,VariableX)-> VariableX
VariableX <- round(VariableX,0)
data <- data.frame(Produit,Juge,VariableX)
data
boxplot(data$VariableX~data$Produit)
boxplot(data$VariableX~data$Juge)
# Répétitions
repe <- 3
produits <- c("A","B","C","D","D")
nJuge <- 7
moyennes <- c(6.5,3.5,5,3.5)
Produit <- rep(produits,each=nJuge,time=repe)
Juge <- rep(1:6,length(produits)*repe)
VariableX <- rep(0,length(Produit))
for (i in 1:length(produits)){
VariableX[Produit==produits[i]] <- rnorm(repe*nJuge,moyennes[i])
}
for (i in 1:nJuge) {
temp <- rnorm(1,0,1)
VariableX[Juge==i] <- VariableX[Juge==i]+temp
}
ifelse(VariableX<0,0,VariableX)-> VariableX
ifelse(VariableX>10,10,VariableX)-> VariableX
VariableX <- round(VariableX,0)
data <- data.frame(Produit,Juge,VariableX)
length(Produit)
length(Juge)
length(variableX)
length(VariableX)
# Répétitions
repe <- 3
produits <- c("A","B","C","D","D")
nJuge <- 7
moyennes <- c(6.5,3.5,5,3.5)
Produit <- rep(produits,each=nJuge,time=repe)
Juge <- rep(1:nJuge,length(produits)*repe)
VariableX <- rep(0,length(Produit))
for (i in 1:length(produits)){
VariableX[Produit==produits[i]] <- rnorm(repe*nJuge,moyennes[i])
}
for (i in 1:nJuge) {
temp <- rnorm(1,0,1)
VariableX[Juge==i] <- VariableX[Juge==i]+temp
}
ifelse(VariableX<0,0,VariableX)-> VariableX
ifelse(VariableX>10,10,VariableX)-> VariableX
VariableX <- round(VariableX,0)
data <- data.frame(Produit,Juge,VariableX)
data
boxplot(data$VariableX~data$Produit)
boxplot(data$VariableX~data$Juge)
# Répétitions
repe <- 4
produits <- c("A","B","C","D","D")
nJuge <- 7
moyennes <- c(6.5,3.5,5,3.5)
Produit <- rep(produits,each=nJuge,time=repe)
Juge <- rep(1:nJuge,length(produits)*repe)
VariableX <- rep(0,length(Produit))
for (i in 1:length(produits)){
VariableX[Produit==produits[i]] <- rnorm(repe*nJuge,moyennes[i])
}
for (i in 1:nJuge) {
temp <- rnorm(1,0,1)
VariableX[Juge==i] <- VariableX[Juge==i]+temp
}
ifelse(VariableX<0,0,VariableX)-> VariableX
ifelse(VariableX>10,10,VariableX)-> VariableX
VariableX <- round(VariableX,0)
data <- data.frame(Produit,Juge,VariableX)
data
boxplot(data$VariableX~data$Produit)
boxplot(data$VariableX~data$Juge)
library(KefiR)
m.test(data$VariableX,data$Produit)
repe <- 3 # Répétitions
produits <- c("A","B","C","D") # Type de produits
nJuge <- 6 # Nb de juges
moyennes <- c(6.5,3.5,5,3.5) # Moyennes de chaque produit
# Répéter chaque produit pour chaque juge, pour chaque répétition
Produit <- rep(produits,each=nJuge,time=repe)
# Créer un vecteur de juges
Juge <- rep(1:nJuge,length(produits)*repe)
# Initialiser la variable X à zéro
VariableX <- rep(0,length(Produit))
# Pour chaque produit, générer une distribution normale de notes autour de la moyenne du produit
for (i in 1:length(produits)){
VariableX[Produit==produits[i]] <- rnorm(repe*nJuge,moyennes[i])
}
# Pour chaque juge, ajouter un biais aléatoire à ses notes
for (i in 1:nJuge) {
temp <- rnorm(1,0,1)
VariableX[Juge==i] <- VariableX[Juge==i]+temp
}
# Si une note est inférieure à zéro, la mettre à zéro
ifelse(VariableX<0,0,VariableX)-> VariableX
# Si une note est supérieure à dix, la mettre à dix
ifelse(VariableX>10,10,VariableX)-> VariableX
# Arrondir les notes à l'entier le plus proche
VariableX <- round(VariableX,0)
# Créer une data.frame avec les produits, les juges et les notes
data <- data.frame(Produit,Juge,VariableX)
head(data)
m.test(data$VariableX,data$Produit)
#Boîte à moustaches multiples
library(lattice)
bwplot(VariableX~Produit|Juge,data=data)
#Boîte à moustaches multiples
library(lattice)
bwplot(VariableX~Produit|Juge,data=data)
setwd("G:/Mon Drive/IUT/biochimie/R3.03_biologie_moléculaire/TP/DN/Rendus");heigh=1.5
#install.packages("readtext")
#install.packages("quanteda")
#install.packages("quanteda.textmodels")
#install.packages("quanteda.textstats")
#install.packages("quanteda.textplots")
#install.packages("ftrCOOL")
library("readtext") # Ouverture de plusieurs documents  de tous les types
library(quanteda) # textmining
quanteda_options(language_stemmer = "french")
library(quanteda.textmodels) # A installer si n�cessaire.
library(quanteda.textmodels)
library("quanteda.textstats")
library("quanteda.textplots")
library("ftrCOOL")
library(stringr)
###############################
#	Ouverture du corpus
###############################
# Charger tous les pdf, mais aussi ceux dans des zips
liste_de_fichiers <- c(list.files(pattern = ".pdf",recursive = TRUE),
list.files(pattern = ".zip",recursive = TRUE))
annees_de_fichiers <- as.numeric(substring(liste_de_fichiers,1,4))
# Supprimer les fichiers qui n'ont pas d'année
liste_de_fichiers <- liste_de_fichiers[which(!is.na(annees_de_fichiers))]
annees_de_fichiers <- annees_de_fichiers[which(!is.na(annees_de_fichiers))]
# Extraire les noms des rédacteurs
noms<- str_split_fixed(liste_de_fichiers, "_",2)[,1]
noms<- str_split_fixed(noms, "/",2)[,2]
#noms <- c("Gérard Bouchard","Cindy Trintignan","Michel Cohan","Edite Macron",
#	"Jacques Bertrand","Elias Dritsa","Kakior de l'anclo","Noria Ben",
#	"Maria Chymas","Sophie Comtesse")
# Charger le corpus de l'année en cours
P_now <- liste_de_fichiers[which(annees_de_fichiers==max(annees_de_fichiers))]
P_now <- readtext(liste_de_fichiers[which(annees_de_fichiers==max(annees_de_fichiers))],encoding ="UTF-8")
setwd("G:/Mon Drive/IUT/biochimie/R3.03_biologie_moléculaire/TP/DN/Rendus");heigh=1.5
#install.packages("readtext")
#install.packages("quanteda")
#install.packages("quanteda.textmodels")
#install.packages("quanteda.textstats")
#install.packages("quanteda.textplots")
#install.packages("ftrCOOL")
library("readtext") # Ouverture de plusieurs documents  de tous les types
library(quanteda) # textmining
quanteda_options(language_stemmer = "french")
library(quanteda.textmodels) # A installer si n�cessaire.
library(quanteda.textmodels)
library("quanteda.textstats")
library("quanteda.textplots")
library("ftrCOOL")
library(stringr)
###############################
#	Ouverture du corpus
###############################
# Charger tous les pdf, mais aussi ceux dans des zips
liste_de_fichiers <- c(list.files(pattern = ".pdf",recursive = TRUE),
list.files(pattern = ".zip",recursive = TRUE))
annees_de_fichiers <- as.numeric(substring(liste_de_fichiers,1,4))
# Supprimer les fichiers qui n'ont pas d'année
liste_de_fichiers <- liste_de_fichiers[which(!is.na(annees_de_fichiers))]
annees_de_fichiers <- annees_de_fichiers[which(!is.na(annees_de_fichiers))]
# Extraire les noms des rédacteurs
noms<- str_split_fixed(liste_de_fichiers, "_",2)[,1]
noms<- str_split_fixed(noms, "/",2)[,2]
#noms <- c("Gérard Bouchard","Cindy Trintignan","Michel Cohan","Edite Macron",
#	"Jacques Bertrand","Elias Dritsa","Kakior de l'anclo","Noria Ben",
#	"Maria Chymas","Sophie Comtesse")
# Charger le corpus de l'année en cours
P_now <- liste_de_fichiers[which(annees_de_fichiers==max(annees_de_fichiers))]
P_now <- readtext(liste_de_fichiers[which(annees_de_fichiers==max(annees_de_fichiers))],encoding ="UTF-8")
# Charger tous les pdf, mais aussi ceux dans des zips
liste_de_fichiers <- c(list.f(pattern = ".pdf",recursive = TRUE),
list.files(pattern = ".zip",recursive = TRUE))
# Charger tous les pdf, mais aussi ceux dans des zips
liste_de_fichiers <- c(list.f(pattern = ".pdf",recursive = TRUE),
list.files(pattern = ".zip",recursive = TRUE))
library("readtext") # Ouverture de plusieurs documents  de tous les types
library(quanteda) # textmining
quanteda_options(language_stemmer = "french")
library(quanteda.textmodels) # A installer si n�cessaire.
library(quanteda.textmodels)
library("quanteda.textstats")
library("quanteda.textplots")
library("ftrCOOL")
library(stringr)
# Charger tous les pdf, mais aussi ceux dans des zips
liste_de_fichiers <- c(list.f(pattern = ".pdf",recursive = TRUE),
list.files(pattern = ".zip",recursive = TRUE))
# Charger tous les pdf, mais aussi ceux dans des zips
liste_de_fichiers <- c(list.files(pattern = ".pdf",recursive = TRUE),
list.files(pattern = ".zip",recursive = TRUE))
annees_de_fichiers <- as.numeric(substring(liste_de_fichiers,1,4))
# Supprimer les fichiers qui n'ont pas d'année
liste_de_fichiers <- liste_de_fichiers[which(!is.na(annees_de_fichiers))]
annees_de_fichiers <- annees_de_fichiers[which(!is.na(annees_de_fichiers))]
# Extraire les noms des rédacteurs
noms<- str_split_fixed(liste_de_fichiers, "_",2)[,1]
noms<- str_split_fixed(noms, "/",2)[,2]
# Charger le corpus de l'année en cours
P_now <- liste_de_fichiers[which(annees_de_fichiers==max(annees_de_fichiers))]
P_now <- readtext(liste_de_fichiers[which(annees_de_fichiers==max(annees_de_fichiers))],encoding ="UTF-8")
P_now$doc_id<- noms[annees_de_fichiers ==max(annees_de_fichiers )]
P_now$doc_id
#install.packages("readtext")
#install.packages("quanteda")
#install.packages("quanteda.textmodels")
#install.packages("quanteda.textstats")
#install.packages("quanteda.textplots")
#install.packages("ftrCOOL")
library("readtext") # Ouverture de plusieurs documents  de tous les types
library(quanteda) # textmining
quanteda_options(language_stemmer = "french")
library(quanteda.textmodels) # A installer si n�cessaire.
library(quanteda.textmodels)
library("quanteda.textstats")
library("quanteda.textplots")
library("ftrCOOL")
library(stringr)
###############################
#	Ouverture du corpus
###############################
# Charger tous les pdf, mais aussi ceux dans des zips
liste_de_fichiers <- c(list.files(pattern = ".pdf",recursive = TRUE),
list.files(pattern = ".zip",recursive = TRUE))
annees_de_fichiers <- as.numeric(substring(liste_de_fichiers,1,4))
# Supprimer les fichiers qui n'ont pas d'année
liste_de_fichiers <- liste_de_fichiers[which(!is.na(annees_de_fichiers))]
annees_de_fichiers <- annees_de_fichiers[which(!is.na(annees_de_fichiers))]
# Extraire les noms des rédacteurs
noms<- str_split_fixed(liste_de_fichiers, "_",2)[,1]
noms<- str_split_fixed(noms, "/",2)[,2]
#noms <- c("Gérard Bouchard","Cindy Trintignan","Michel Cohan","Edite Macron",
#	"Jacques Bertrand","Elias Dritsa","Kakior de l'anclo","Noria Ben",
#	"Maria Chymas","Sophie Comtesse")
# Charger le corpus de l'année en cours
P_now <- liste_de_fichiers[which(annees_de_fichiers==max(annees_de_fichiers))]
P_now <- readtext(liste_de_fichiers[which(annees_de_fichiers==max(annees_de_fichiers))],encoding ="UTF-8")
# Charger le corpus de l'année en cours
P_now <- liste_de_fichiers[which(annees_de_fichiers==max(annees_de_fichiers))]
P_now <- readtext(liste_de_fichiers[which(annees_de_fichiers==max(annees_de_fichiers))],encoding ="UTF-8")
# Charger tous les pdf, mais aussi ceux dans des zips
liste_de_fichiers <- c(list.files(pattern = ".pdf",recursive = TRUE),
list.files(pattern = ".zip",recursive = TRUE))
annees_de_fichiers <- as.numeric(substring(liste_de_fichiers,1,4))
# Supprimer les fichiers qui n'ont pas d'année
liste_de_fichiers <- liste_de_fichiers[which(!is.na(annees_de_fichiers))]
annees_de_fichiers <- annees_de_fichiers[which(!is.na(annees_de_fichiers))]
# Extraire les noms des rédacteurs
noms<- str_split_fixed(liste_de_fichiers, "_",2)[,1]
noms<- str_split_fixed(noms, "/",2)[,2]
noms
liste_de_fichiers
# Charger tous les pdf, mais aussi ceux dans des zips
liste_de_fichiers <- c(list.files(pattern = ".pdf",recursive = TRUE),
list.files(pattern = ".zip",recursive = TRUE))
getwd()
setwd("G:/Mon Drive/IUT/biochimie/R3.03_biologie_moléculaire/TP/DN/Rendus");heigh=1.5
setwd("G:/Mon Drive/IUT/biochimie/R3.03_biologie_moléculaire/TP/DN/Rendus");heigh=1.5
#install.packages("readtext")
#install.packages("quanteda")
#install.packages("quanteda.textmodels")
#install.packages("quanteda.textstats")
#install.packages("quanteda.textplots")
#install.packages("ftrCOOL")
library("readtext") # Ouverture de plusieurs documents  de tous les types
library(quanteda) # textmining
quanteda_options(language_stemmer = "french")
library(quanteda.textmodels) # A installer si n�cessaire.
library(quanteda.textmodels)
library("quanteda.textstats")
library("quanteda.textplots")
library("ftrCOOL")
library(stringr)
###############################
#	Ouverture du corpus
###############################
# Charger tous les pdf, mais aussi ceux dans des zips
liste_de_fichiers <- c(list.files(pattern = ".pdf",recursive = TRUE),
list.files(pattern = ".zip",recursive = TRUE))
annees_de_fichiers <- as.numeric(substring(liste_de_fichiers,1,4))
# Supprimer les fichiers qui n'ont pas d'année
liste_de_fichiers <- liste_de_fichiers[which(!is.na(annees_de_fichiers))]
annees_de_fichiers <- annees_de_fichiers[which(!is.na(annees_de_fichiers))]
# Extraire les noms des rédacteurs
noms<- str_split_fixed(liste_de_fichiers, "_",2)[,1]
noms<- str_split_fixed(noms, "/",2)[,2]
#noms <- c("Gérard Bouchard","Cindy Trintignan","Michel Cohan","Edite Macron",
#	"Jacques Bertrand","Elias Dritsa","Kakior de l'anclo","Noria Ben",
#	"Maria Chymas","Sophie Comtesse")
# Charger le corpus de l'année en cours
P_now <- liste_de_fichiers[which(annees_de_fichiers==max(annees_de_fichiers))]
P_now <- readtext(liste_de_fichiers[which(annees_de_fichiers==max(annees_de_fichiers))],encoding ="UTF-8")
liste_de_fichiers
# Charger tous les pdf, mais aussi ceux dans des zips
liste_de_fichiers <- c(list.files(pattern = ".pdf",recursive = TRUE),
list.files(pattern = ".zip",recursive = TRUE))
annees_de_fichiers <- as.numeric(substring(liste_de_fichiers,1,4))
annees_de_fichiers
liste_de_fichiers
getwd()
# Charger tous les pdf, mais aussi ceux dans des zips
liste_de_fichiers <- c(list.files(pattern = ".pdf",recursive = TRUE),
list.files(pattern = ".zip",recursive = TRUE))
liste_de_fichiers
# Charger tous les pdf, mais aussi ceux dans des zips
liste_de_fichiers <- c(list.files(pattern = ".pdf",recursive = TRUE),
list.files(pattern = ".zip",recursive = TRUE))
annees_de_fichiers <- as.numeric(substring(liste_de_fichiers,1,4))
# Supprimer les fichiers qui n'ont pas d'année
liste_de_fichiers <- liste_de_fichiers[which(!is.na(annees_de_fichiers))]
annees_de_fichiers <- annees_de_fichiers[which(!is.na(annees_de_fichiers))]
# Extraire les noms des rédacteurs
noms<- str_split_fixed(liste_de_fichiers, "_",2)[,1]
noms<- str_split_fixed(noms, "/",2)[,2]
# Charger le corpus de l'année en cours
P_now <- liste_de_fichiers[which(annees_de_fichiers==max(annees_de_fichiers))]
P_now <- readtext(liste_de_fichiers[which(annees_de_fichiers==max(annees_de_fichiers))],encoding ="UTF-8")
P_now$doc_id<- noms[annees_de_fichiers ==max(annees_de_fichiers )]
list.files(pattern = ".pdf",recursive = TRUE)
# Charger tous les pdf, mais aussi ceux dans des zips
liste_de_fichiers <- c(list.files(pattern = ".pdf",recursive = TRUE),
list.files(pattern = ".zip",recursive = TRUE))
liste_de_fichiers
list.files(pattern = ".zip",recursive = TRUE)
c(list.files(pattern = ".pdf",recursive = TRUE),
list.files(pattern = ".zip",recursive = TRUE))
# Charger tous les pdf, mais aussi ceux dans des zips
liste_de_fichiers <- c(list.files(pattern = ".pdf",recursive = TRUE),
list.files(pattern = ".zip",recursive = TRUE))
liste_de_fichiers
setwd("G:/Mon Drive/IUT/biochimie/R3.03_biologie_moléculaire/TP/AGRO/Rendus");heigh<-2
setwd("G:/Mon Drive/IUT/biochimie/R3.03_biologie_moléculaire/TP/DN/Rendus");heigh=1.5
#install.packages("readtext")
#install.packages("quanteda")
#install.packages("quanteda.textmodels")
#install.packages("quanteda.textstats")
#install.packages("quanteda.textplots")
#install.packages("ftrCOOL")
library("readtext") # Ouverture de plusieurs documents  de tous les types
library(quanteda) # textmining
quanteda_options(language_stemmer = "french")
library(quanteda.textmodels) # A installer si n�cessaire.
library(quanteda.textmodels)
library("quanteda.textstats")
library("quanteda.textplots")
library("ftrCOOL")
library(stringr)
###############################
#	Ouverture du corpus
###############################
# Charger tous les pdf, mais aussi ceux dans des zips
liste_de_fichiers <- c(list.files(pattern = ".pdf",recursive = TRUE),
list.files(pattern = ".zip",recursive = TRUE))
annees_de_fichiers <- as.numeric(substring(liste_de_fichiers,1,4))
# Supprimer les fichiers qui n'ont pas d'année
liste_de_fichiers <- liste_de_fichiers[which(!is.na(annees_de_fichiers))]
annees_de_fichiers <- annees_de_fichiers[which(!is.na(annees_de_fichiers))]
# Extraire les noms des rédacteurs
noms<- str_split_fixed(liste_de_fichiers, "_",2)[,1]
noms<- str_split_fixed(noms, "/",2)[,2]
#noms <- c("Gérard Bouchard","Cindy Trintignan","Michel Cohan","Edite Macron",
#	"Jacques Bertrand","Elias Dritsa","Kakior de l'anclo","Noria Ben",
#	"Maria Chymas","Sophie Comtesse")
# Charger le corpus de l'année en cours
P_now <- liste_de_fichiers[which(annees_de_fichiers==max(annees_de_fichiers))]
P_now <- readtext(liste_de_fichiers[which(annees_de_fichiers==max(annees_de_fichiers))],encoding ="UTF-8")
c(list.files(pattern = ".pdf",recursive = TRUE),
list.files(pattern = ".zip",recursive = TRUE))
liste_de_fichiers
c(list.files(pattern = ".pdf",recursive = TRUE),
list.files(pattern = ".zip",recursive = TRUE))->liste_de_fichiers
liste_de_fichiers
annees_de_fichiers <- as.numeric(substring(liste_de_fichiers,1,4))
# Supprimer les fichiers qui n'ont pas d'année
liste_de_fichiers <- liste_de_fichiers[which(!is.na(annees_de_fichiers))]
annees_de_fichiers <- annees_de_fichiers[which(!is.na(annees_de_fichiers))]
# Extraire les noms des rédacteurs
noms<- str_split_fixed(liste_de_fichiers, "_",2)[,1]
noms<- str_split_fixed(noms, "/",2)[,2]
# Charger le corpus de l'année en cours
P_now <- liste_de_fichiers[which(annees_de_fichiers==max(annees_de_fichiers))]
P_now <- readtext(liste_de_fichiers[which(annees_de_fichiers==max(annees_de_fichiers))],encoding ="UTF-8")
P_now$doc_id<- noms[annees_de_fichiers ==max(annees_de_fichiers )]
# Charger le corpus de l'année en cours
P_now <- liste_de_fichiers[which(annees_de_fichiers==max(annees_de_fichiers))]
P_now
P_now <- readtext(liste_de_fichiers[which(annees_de_fichiers==max(annees_de_fichiers))],encoding ="UTF-8")
liste_de_fichiers[which(annees_de_fichiers==max(annees_de_fichiers))]
P_now <- readtext(liste_de_fichiers[which(annees_de_fichiers==max(annees_de_fichiers))],encoding ="UTF-8")
remotes::install_github("Antoine-Masse/KefiR",force=TRUE)
install.packages("roxygen2")
install.packages("Rtools")
tools::showNonASCIIfile("R/bootreg.R")
remotes::install_git("Antoine-Masse/KefiR")
library(remotes)
install_git("Antoine-Masse/KefiR")
install_git("Antoine-Masse/KefiR", force=TRUE)
remotes::install_git("Antoine-Masse/KefiR", force=TRUE)
devtools::install_git("Antoine-Masse/KefiR", force=TRUE)
install.packages("remotes") ; require(remotes)
remotes::install_github("Antoine-Masse/KefiR",force=TRUE)
remotes::install_github("Antoine-Masse/KefiR",force=TRUE)
# Répondre à la question (ou CRAN (2) ou,mieux None (3)).
library("KefiR")
3
library(KefiR)
data(iris)
# Créer un modèle mixte
# Modèle avec Petal.Length comme effet fixe et Species comme effet aléatoire
reg_mixed <- lmer(Sepal.Length ~ Petal.Length + (1|Species), data = iris)
data(iris)
# Créer un modèle mixte
# Modèle avec Petal.Length comme effet fixe et Species comme effet aléatoire
reg <- lmer(Sepal.Length ~ Petal.Length + (1|Species), data = iris)
library(lme4)
library(lmerTest)
# Charger les données iris
data(iris)
# Créer un modèle mixte
# Modèle avec Petal.Length comme effet fixe et Species comme effet aléatoire
reg_mixed <- lmer(Sepal.Length ~ Petal.Length + (1|Species), data = iris)
library(lme4)
library(lmerTest)
# Charger les données iris
data(iris)
# Créer un modèle mixte
# Modèle avec Petal.Length comme effet fixe et Species comme effet aléatoire
reg <- lmer(Sepal.Length ~ Petal.Length + (1|Species), data = iris)
valreg(reg)
reg_mixed <- lmer(Reaction ~ Days + (Days | Subject), data = sleepstudy)
get_pvals(reg_mixed=)
devtools::document()
tools::showNonASCIIfile("R/cooks.distance_lmer.R")
R CMD check --no-stop-on-warning KefiR_0.0.1.0.tar.gz
devtools::check(args = "--no-stop-on-warning")
install_git("Antoine-Masse/KefiR",force=TRUE)
remotes::install_git("Antoine-Masse/KefiR",force=TRUE)
devtools::install_git("Antoine-Masse/KefiR",force=TRUE)
devtools::install_git("Antoine-Masse/KefiR",force=TRUE)
remotes::install_git("Antoine-Masse/KefiR",force=TRUE)
